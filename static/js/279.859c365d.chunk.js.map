{"version":3,"file":"static/js/279.859c365d.chunk.js","mappings":"wMACA,EAA2B,6BAA3B,EAAgE,0BAAhE,EAA+O,2BAA/O,EAAoR,4B,uCCApR,EAAyB,4BAAzB,EAA6D,2BAA7D,EAAgG,2BAAhG,EAAiI,yB,SCKpHA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MA4BjB,OACE,kBAAMC,UAAWC,EAAcC,SA3BZ,SAAAC,GACnBA,EAAEC,iBACF,IAAIC,GAAgB,EACdC,EAAOH,EAAEI,OACTC,EAAOF,EAAKE,KAAKC,MACjBC,EAASJ,EAAKI,OAAOD,MACrBE,EAAcH,EAAKG,cAEnBC,EAAa,CACjBJ,KAAMA,EACNE,OAAQA,GAGVf,EAASkB,SAAQ,YAAe,IAAZL,EAAW,EAAXA,KACdA,EAAKG,gBAAkBA,IACzBG,MAAM,GAAD,OAAIN,EAAJ,4BACLH,GAAgB,EAEnB,IAEGA,IAEJP,GAASiB,EAAAA,EAAAA,eAAcH,IACvBN,EAAKU,QACN,EAGC,WACE,mBAAOhB,UAAWC,EAAlB,kBAEE,kBACED,UAAWC,EACXgB,KAAK,OACLT,KAAK,OACLU,QAAQ,yHACRC,MAAM,yIACNC,YAAY,OACZC,UAAQ,QAGZ,mBAAOrB,UAAWC,EAAlB,oBAEE,kBACED,UAAWC,EACXqB,aAAa,MACbL,KAAK,MACLT,KAAK,SACLU,QAAQ,yFACRC,MAAM,+FACNC,YAAY,SACZC,UAAQ,QAGZ,oBAAQrB,UAAWC,EAAWgB,KAAK,SAAnC,WACE,0CADF,KAC2B,SAAC,MAAD,SAIhC,E,4BC7Dc,SAASM,IACtB,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACM5B,GAAWC,EAAAA,EAAAA,MAiBjB,OACE,+BACE,iBAAKC,UAAW2B,EAAhB,WACE,4BACE,mBAAQ3B,UAAW2B,EAAnB,UACE,SAAC,KAAD,CAASC,GAAG,eAAZ,6BAEF,eAAI5B,UAAW2B,EAAf,0BACA,gBAAK3B,UAAW2B,EAAhB,SAA4BF,IAAW,uBAAIA,UAE7C,0BACE,SAAC/B,EAAD,CACEmC,UA3BQ,SAAArB,GAChBkB,EAAW,GAAD,OAAIlB,EAAJ,4BACVsB,YAAW,kBAAMJ,GAAW,EAAjB,GAAyB,IACrC,EAyBSK,oBAxBU,SAACvB,EAAME,GACzBZ,EAASkC,EAAAA,EAAAA,YAA+B,CAAExB,KAAAA,EAAME,OAAAA,KAAWuB,MACzD,SAAAC,GACE,IAAMC,EAAUD,EAASE,QAAQ5B,KAEjCkB,EAAW,GAAD,OAAIS,EAAJ,qCACVL,YAAW,kBAAMJ,GAAW,EAAjB,GAAyB,IACrC,GAEJ,UAqBF,C,iPC3CY7B,EAAc,SAAAwC,GAAK,OAAIA,EAAM1C,SAAS2C,KAAnB,EACnBC,EAAY,SAAAF,GAAK,OAAIA,EAAM1C,SAAS6C,MAAnB,EACjBC,EAAa,SAAAJ,GAAK,OAAIA,EAAM1C,SAAS+C,OAAnB,EAClBC,EAAW,SAAAN,GAAK,OAAIA,EAAM1C,SAASiD,KAAnB,GAEKC,EAAAA,EAAAA,IAChC,CAAChD,EAAa0C,IACd,SAACD,EAAOE,GACN,IAAMM,EAAmBN,EAAOO,oBAChC,OAAOT,EAAME,QAAO,SAAAQ,GAAO,OACzBA,EAAQxC,KAAKuC,oBAAoBE,SAASH,EADjB,GAG5B,G","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/AddContact/AddContact.module.css?fb07","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","pages/AddContact/AddContact.jsx","redux/contacts/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formPage\":\"AddContact_formPage__0wSkU\",\"title\":\"AddContact_title__8LRoK\",\"form\":\"AddContact_form__Ma1Qd\",\"formText\":\"AddContact_formText__a2e-I\",\"label\":\"AddContact_label__C7zfR\",\"input\":\"AddContact_input__J5i3+\",\"button\":\"AddContact_button__IPT+C\",\"massage\":\"AddContact_massage__z69RW\"};","// extracted by mini-css-extract-plugin\nexport default {\"submit\":\"ContactForm_submit__eYq7N\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { getContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FcContacts } from 'react-icons/fc';\nimport style from './ContactForm.module.css';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    let nameOntheList = false;\n    const form = e.target;\n    const name = form.name.value;\n    const number = form.number.value;\n    const toLowerCase = name.toLowerCase();\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    contacts.forEach(({ name }) => {\n      if (name.toLowerCase() === toLowerCase) {\n        alert(`${name} is already in contacts`);\n        nameOntheList = true;\n      }\n    });\n\n    if (nameOntheList) return;\n\n    dispatch(fetchContacts(newContact));\n    form.reset();\n  };\n\n  return (\n    <form className={style.submit} onSubmit={handleSubmit}>\n      <label className={style.label}>\n        Name\n        <input\n          className={style.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"name\"\n          required\n        />\n      </label>\n      <label className={style.label}>\n        Number\n        <input\n          className={style.input}\n          autoComplete=\"off\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\"number\"\n          required\n        />\n      </label>\n      <button className={style.btn} type=\"submit\">\n        <span>Add contact</span> <FcContacts />\n      </button>\n    </form>\n  );\n};\n","import s from './AddContact.module.css';\nimport  {ContactForm } from '../../components/ContactForm/ContactForm';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { NavLink } from 'react-router-dom';\n\nexport default function AddContact() {\n  const [message, setMessage] = useState(false);\n  const dispatch = useDispatch();\n\n  const showAlert = name => {\n    setMessage(`${name} is already in contacts`);\n    setTimeout(() => setMessage(false), 3000);\n  };\n  const saveContact = (name, number) => {\n    dispatch(contactsOperations.saveContact({ name, number })).then(\n      response => {\n        const newName = response.payload.name;\n\n        setMessage(`${newName} has been added to your contacts`);\n        setTimeout(() => setMessage(false), 3000);\n      }\n    );\n  };\n\n  return (\n    <>\n      <div className={s.formPage}>\n        <div>\n          <button className={s.button}>\n            <NavLink to=\"/viewcontact\">View Contact</NavLink>\n          </button>\n          <h1 className={s.title}>Add Contact</h1>\n          <div className={s.massage}>{message && <p>{message}</p>}</div>\n        </div>\n        <div>\n          <ContactForm\n            showAlert={showAlert}\n            dispatchSaveContact={saveContact}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.Loading;\nexport const getError = state => state.contacts.error;\n\nexport const getvisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (items, filter) => {\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return items.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n"],"names":["ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","className","style","onSubmit","e","preventDefault","nameOntheList","form","target","name","value","number","toLowerCase","newContact","forEach","alert","fetchContacts","reset","type","pattern","title","placeholder","required","autoComplete","AddContact","useState","message","setMessage","s","to","showAlert","setTimeout","dispatchSaveContact","contactsOperations","then","response","newName","payload","state","items","getFilter","filter","getLoading","Loading","getError","error","createSelector","normalizedFilter","toLocaleLowerCase","contact","includes"],"sourceRoot":""}