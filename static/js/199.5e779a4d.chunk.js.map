{"version":3,"file":"static/js/199.5e779a4d.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/Register/Register.module.css?12fc","pages/Register/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formPage\":\"Register_formPage__MfN9N\",\"title\":\"Register_title__4r11G\",\"container\":\"Register_container__9LuET\",\"form\":\"Register_form__c8aUa\",\"formText\":\"Register_formText__rDhbB\",\"label\":\"Register_label__KQhFe\",\"input\":\"Register_input__d+3tu\",\"button\":\"Register_button__wRvqA\",\"massage\":\"Register_massage__37v58\"};","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { register } from '../../redux/auth/operations';\nimport s from './Register.module.css';\nimport { authSelectors } from '../../redux/auth/selector';\n\nexport default function Register() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isNameEmpty, setIsNameEmpty] = useState(false);\n  const [isEmailEmpty, setIsEmailEmpty] = useState(false);\n  const [isPasswordEmpty, setIsPasswordEmpty] = useState(false);\n  const [isPasswordValid, setIsPasswordValid] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n  const isError = useSelector(authSelectors.getIsAuthError);\n\n  useEffect(() => {\n    console.log('isError', isError);\n    if (isError?.name === 'MongoError') {\n      setErrorMessage('This user is already registered');\n    }\n    if (isError?.errors?.password?.name === 'ValidatorError') {\n      setErrorMessage(isError.message);\n    }\n    setTimeout(() => {\n      setErrorMessage('');\n    }, 3000);\n  }, [isError]);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '') {\n      setIsNameEmpty(true);\n      setTimeout(() => setIsNameEmpty(false), 3000);\n      return;\n    }\n    if (email.trim() === '') {\n      setIsEmailEmpty(true);\n      setTimeout(() => setIsEmailEmpty(false), 3000);\n      return;\n    }\n    if (password.trim() === '') {\n      setIsPasswordEmpty(true);\n      setTimeout(() => setIsPasswordEmpty(false), 3000);\n      return;\n    }\n    if (password.length < 7) {\n      setIsPasswordValid(false);\n      setTimeout(() => setIsPasswordValid(true), 3000);\n      return;\n    }\n    dispatch(register({ name, email, password }));\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <>\n      <div className={s.formPage}>\n     <div className={s.container}>\n          <h1 className={s.title}>Sign up</h1>\n          <div className={s.massage}>\n            {isNameEmpty && <p>Enter your name</p>}\n            {isEmailEmpty && <p>Enter your email</p>}\n            {isPasswordEmpty && <p>Enter your password</p>}\n            {!isPasswordValid && (\n              <p>Minimum allowed password length is 8 characters</p>\n            )}\n            {isError && errorMessage !== '' && <p>{errorMessage}</p>}\n          </div>\n      \n\n        <form className={s.form} onSubmit={handleSubmit} autoComplete=\"on\">\n          <p className={s.formText}> Registration details</p>\n          <label className={s.label}>\n            Name\n            <input\n              className={s.input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n            />\n          </label>\n\n          <label className={s.label}>\n            Email\n            <input\n              className={s.input}\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={handleChange}\n            />\n          </label>\n\n          <label className={s.label}>\n            Password\n            <input\n              className={s.input}\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={handleChange}\n            />\n          </label>\n\n          <button className={s.button} type=\"submit\">\n            Sign up\n          </button>\n        </form>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["Register","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","isNameEmpty","setIsNameEmpty","isEmailEmpty","setIsEmailEmpty","isPasswordEmpty","setIsPasswordEmpty","isPasswordValid","setIsPasswordValid","errorMessage","setErrorMessage","isError","useSelector","authSelectors","useEffect","console","log","errors","message","setTimeout","handleChange","target","value","className","s","onSubmit","e","preventDefault","trim","length","register","autoComplete","type","onChange"],"sourceRoot":""}